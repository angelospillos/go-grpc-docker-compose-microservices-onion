// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: coins.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopCoinsByMarketCapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TopCoinsByMarketCapRequest) Reset() {
	*x = TopCoinsByMarketCapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coins_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopCoinsByMarketCapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopCoinsByMarketCapRequest) ProtoMessage() {}

func (x *TopCoinsByMarketCapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coins_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopCoinsByMarketCapRequest.ProtoReflect.Descriptor instead.
func (*TopCoinsByMarketCapRequest) Descriptor() ([]byte, []int) {
	return file_coins_proto_rawDescGZIP(), []int{0}
}

func (x *TopCoinsByMarketCapRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   int32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Symbol string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price  float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coins_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_coins_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_coins_proto_rawDescGZIP(), []int{1}
}

func (x *Coin) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Coin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Coin) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type TopCoinsByMarketCapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *TopCoinsByMarketCapResponse) Reset() {
	*x = TopCoinsByMarketCapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coins_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopCoinsByMarketCapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopCoinsByMarketCapResponse) ProtoMessage() {}

func (x *TopCoinsByMarketCapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coins_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopCoinsByMarketCapResponse.ProtoReflect.Descriptor instead.
func (*TopCoinsByMarketCapResponse) Descriptor() ([]byte, []int) {
	return file_coins_proto_rawDescGZIP(), []int{2}
}

func (x *TopCoinsByMarketCapResponse) GetCoins() []*Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

var File_coins_proto protoreflect.FileDescriptor

var file_coins_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x32, 0x0a, 0x1a, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x32, 0x8e, 0x01, 0x0a,
	0x11, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x79, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x2d, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x74, 0x6f, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65,
	0x6c, 0x6f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x6f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coins_proto_rawDescOnce sync.Once
	file_coins_proto_rawDescData = file_coins_proto_rawDesc
)

func file_coins_proto_rawDescGZIP() []byte {
	file_coins_proto_rawDescOnce.Do(func() {
		file_coins_proto_rawDescData = protoimpl.X.CompressGZIP(file_coins_proto_rawDescData)
	})
	return file_coins_proto_rawDescData
}

var file_coins_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_coins_proto_goTypes = []interface{}{
	(*TopCoinsByMarketCapRequest)(nil),  // 0: coinsorchestrator.topCoinsByMarketCapRequest
	(*Coin)(nil),                        // 1: coinsorchestrator.coin
	(*TopCoinsByMarketCapResponse)(nil), // 2: coinsorchestrator.topCoinsByMarketCapResponse
}
var file_coins_proto_depIdxs = []int32{
	1, // 0: coinsorchestrator.topCoinsByMarketCapResponse.coins:type_name -> coinsorchestrator.coin
	0, // 1: coinsorchestrator.coinsOrchestrator.getTopCoinsByMarketCap:input_type -> coinsorchestrator.topCoinsByMarketCapRequest
	2, // 2: coinsorchestrator.coinsOrchestrator.getTopCoinsByMarketCap:output_type -> coinsorchestrator.topCoinsByMarketCapResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_coins_proto_init() }
func file_coins_proto_init() {
	if File_coins_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coins_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopCoinsByMarketCapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coins_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coins_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopCoinsByMarketCapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coins_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coins_proto_goTypes,
		DependencyIndexes: file_coins_proto_depIdxs,
		MessageInfos:      file_coins_proto_msgTypes,
	}.Build()
	File_coins_proto = out.File
	file_coins_proto_rawDesc = nil
	file_coins_proto_goTypes = nil
	file_coins_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoinsOrchestratorClient is the client API for CoinsOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoinsOrchestratorClient interface {
	GetTopCoinsByMarketCap(ctx context.Context, in *TopCoinsByMarketCapRequest, opts ...grpc.CallOption) (*TopCoinsByMarketCapResponse, error)
}

type coinsOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinsOrchestratorClient(cc grpc.ClientConnInterface) CoinsOrchestratorClient {
	return &coinsOrchestratorClient{cc}
}

func (c *coinsOrchestratorClient) GetTopCoinsByMarketCap(ctx context.Context, in *TopCoinsByMarketCapRequest, opts ...grpc.CallOption) (*TopCoinsByMarketCapResponse, error) {
	out := new(TopCoinsByMarketCapResponse)
	err := c.cc.Invoke(ctx, "/coinsorchestrator.coinsOrchestrator/getTopCoinsByMarketCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinsOrchestratorServer is the server API for CoinsOrchestrator service.
type CoinsOrchestratorServer interface {
	GetTopCoinsByMarketCap(context.Context, *TopCoinsByMarketCapRequest) (*TopCoinsByMarketCapResponse, error)
}

// UnimplementedCoinsOrchestratorServer can be embedded to have forward compatible implementations.
type UnimplementedCoinsOrchestratorServer struct {
}

func (*UnimplementedCoinsOrchestratorServer) GetTopCoinsByMarketCap(context.Context, *TopCoinsByMarketCapRequest) (*TopCoinsByMarketCapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopCoinsByMarketCap not implemented")
}

func RegisterCoinsOrchestratorServer(s *grpc.Server, srv CoinsOrchestratorServer) {
	s.RegisterService(&_CoinsOrchestrator_serviceDesc, srv)
}

func _CoinsOrchestrator_GetTopCoinsByMarketCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopCoinsByMarketCapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinsOrchestratorServer).GetTopCoinsByMarketCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinsorchestrator.coinsOrchestrator/GetTopCoinsByMarketCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinsOrchestratorServer).GetTopCoinsByMarketCap(ctx, req.(*TopCoinsByMarketCapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoinsOrchestrator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coinsorchestrator.coinsOrchestrator",
	HandlerType: (*CoinsOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTopCoinsByMarketCap",
			Handler:    _CoinsOrchestrator_GetTopCoinsByMarketCap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coins.proto",
}
